
Notes from the figgy project

2015-04-08 14:33

Other ways of handling conflict

0) Before import, do a data scrub on the xml, validate that there is no conflict and bad data in the data file(s).
1) Run through publisher records one at a time.


Relevant experience
APVU - wrote a whole validation and import system for Accounts Receivable EDI data. Every record was marked as bad or good, good records were further batched for import, bad records were displayed with an informative message.
Each individual record was validated. Then, the batch as a whole was validated, to look for conflicts and inconsistencies.


Other considerations
What about ISBN conflicts?
The publisher supplies us an id, but we probably can't assume that it is unique for that publisher. They may have duplicates.


============
2015-04-13 12:34

Problems with the data

Book 1
Book ID changes from "book-1" to 10000000000001
Add a Proprietary alias of 12345ABC

Book 2
Adds alias Proprietary, Unknown Type 12345ABC
Adds an ISBN-13 alias that conflicts with book 1 alias and with book 1 isbn number

Book 3
Id changes from book-3 to 12345ABC. This conflicts with book 1 alias and book 2 alias

Solutions

Versions
Have a publisher version field and our own version field. Auto-increment our version field.

when processing an insert record, check for collisions
    Id against existing ids
    Id against existing aliases
    Each alias against existing ids
    Each alias against existing aliases

If a collision is found, print an informative error, and skip that record.



More elaborate solution:
Create a model for publisher record: Date, status, errore message, xml
Import all the updates in to a batch of publisher records
Validate the whole batch. Before import, notify the user of any conflicts.
Import the batch. Any publisher records that cause errors are rolled back. Notify the user of any errors.
Provide a view to display errors and conflicts in publisher imports, and a way to resolve them.
Handle the case when a book id changes. Notify the user and allow them to delete the old record unser the old id.
Better handling of version numbers. Create an internal version number that is automatically incremented. Record the version number that the publisher sends, but don't rely on it for anything.
MOAR TESTS
What happens when a book id changes, and the new id matches an existing id? How can we tell the difference between that and a regular update? Perhaps take a measurement of percent of data that is going to change, and flag any cases where that is above some threshhold.
Handle cases where a string id conflicts with an int id. Handle leading and trailing whitespace.
Currently, I'm checking the imported book's id against all the aliases of the other books in the database. In addition, check each alias against exsiting ids, and check each alias against existing aliases.
I changed the Alias model so that it requires the combination of scheme and value to be unique. I also madse that a compund index. The application may require a non-unique index just on value.
